# Copyright (C) 2013-2014 Altera Corporation, San Jose, California, USA. All rights reserved. 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this 
# software and associated documentation files (the "Software"), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, 
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to 
# whom the Software is furnished to do so, subject to the following conditions: 
# The above copyright notice and this permission notice shall be included in all copies or 
# substantial portions of the Software. 
#  
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
# OTHER DEALINGS IN THE SOFTWARE. 
#  
# This agreement shall be governed in all respects by the laws of the State of California and 
# by the laws of the United States of America. 


# This is a GNU Makefile.

# It can be used to compile an OpenCL program with
# the Altera SDK for OpenCL.
# See README.txt for more information.


# You must configure ALTERAOCLSDKROOT to point the root directory of the Altera SDK for OpenCL
# software installation.
# See http://www.altera.com/literature/hb/opencl-sdk/aocl_getting_started.pdf 
# for more information on installing and configuring the Altera SDK for OpenCL.

# Waqar Nabi, Dec 21 2015
#
# Using Makefile to build sdaccel project
# rather than the sdaccel script
# Based on sample given in SDAccel user guide
#
# Can be used to compile only host, device, or all, which would
# only re-build as needed. This was not possible 
# using the tcl scripts, which would re-build everything
# 
# TODO: how to generate estimates?
 
# ** Usage example **
# --------------------
# make DIM1=1000 AP=<OPTION> FLOW=<OPTION>
	# where:
	# AP=CONSTANT
	# AP=CONTIGUOUS
	# AP=FIXED_STRIDE
	# AP=VARYING_PREDICTABLE_STRIDE (not working)
	# AP=RANDOM_ACCESS
	
	#	FLOW=cpu_emu	=> cpu-emulation
	#	FLOW=hw_emu 	=> hw-emulation (not working)
	#	FLOW=hw 			=> fpga-execution

# Default values will be used for any option not specified

# NOTE: Diretory Structure must be maintened
# ----



#  Benchmark Parameters
#  ---------------------
# defaults are described in the source files

CDEFINES =
KERNEL_DEFS = 

ifdef NO_INTERLEAVING
KERNEL_DEFS += --no-interleaving default
endif

#target board/flow [AOCL*/SDACCEL]
ifdef TARGET
CDEFINES 		+= -DTARGET=$(TARGET)
endif

#streams to/from host or global memory?
ifdef STREAMSFROMTO
CDEFINES 		+= -DSTREAMSFROMTO=$(STREAMSFROMTO)
endif

#which of the 4 benchmark kernel to run?
ifdef KERNELBENCH
CDEFINES 		+= -DKERNELBENCH=$(KERNELBENCH)
endif

# User specified array dimensions
ifdef STREAM_ARRAY_SIZE_DIM1
CDEFINES 		+= -DSTREAM_ARRAY_SIZE_DIM1=$(STREAM_ARRAY_SIZE_DIM1)
endif

# User specified Access Pattern (AP)
ifdef ACCESS_PATTERN
CDEFINES += -DACCESS_PATTERN=$(ACCESS_PATTERN)
endif

ifdef WORD
CDEFINES += -DWORD=$(WORD)
endif

ifdef VECTOR_SIZE
CDEFINES += -DVECTOR_SIZE=$(VECTOR_SIZE)
endif

ifdef NUM_SIMD_ITEMS
CDEFINES += -DNUM_SIMD_ITEMS=$(NUM_SIMD_ITEMS)
KERNEL_DEFS += -DNUM_SIMD_ITEMS=$(NUM_SIMD_ITEMS)
endif

ifdef REQ_WORKGROUP_SIZE
CDEFINES += -DREQ_WORKGROUP_SIZE=$(REQ_WORKGROUP_SIZE)
KERNEL_DEFS += -DREQ_WORKGROUP_SIZE=$(REQ_WORKGROUP_SIZE)
endif

ifdef LOOPING
CDEFINES += -DLOOPING=$(LOOPING)
KERNEL_DEFS += -DLOOPING=$(LOOPING)
endif

ifdef NESTING
CDEFINES += -DNESTING=$(NESTING)
KERNEL_DEFS += -DNESTING=$(NESTING)
endif

ifdef TESTING
CDEFINES += -DTESTING=$(TESTING)
KERNEL_DEFS += -DTESTING=$(TESTING)
endif

ifdef NUM_COMPUTE_UNITS
CDEFINES += -DNUM_COMPUTE_UNITS=$(NUM_COMPUTE_UNITS)
KERNEL_DEFS += -DNUM_COMPUTE_UNITS=$(NUM_COMPUTE_UNITS)
endif

#  Specify Flow 
#  ---------------------
#supported flow: cpu_emu, hw_emu, hw
# *default* is cpu_emu
ifdef FLOW
#FLOW=$(MODE)
else
FLOW=cpu_emu
endif

#  Specify Sources 
#  ------------------------------
# All include files.
INC_FILES :=

# Source files.
# Since I create a child folder and build from there, so
# have to go an additional step up

# COMMON_SRCS := ../../host-aocl/common/AOCL_Utils.cpp
# HOST_SRCS :=  ../../host-aocl/streamHost-aocl.cpp
# KERNEL_SRCS = ../../device/streamKernel.cl

COMMON_SRCS := 
HOST_SRCS :=  ../../host-all/streamHost-all.cpp
KERNEL_SRCS = ../../device/streamKernel.cl

SRCS = $(COMMON_SRCS) $(HOST_SRCS)

#  Specify Targets
#  ------------------------------
HOST_EXE=stream-opencl-$(STREAM_ARRAY_SIZE_DIM1)-$(ACCESS_PATTERN)-$(FLOW).exe
AOCLBIN=stream-opencl-$(DIM1)-$(AP)-$(FLOW).aocx
	#aocx has to have same name as host exe

# -------------------------------------------------
# This point on, should be common for all examples
# -------------------------------------------------

# Compilers
CC = g++
CLCC = aoc
#CLCC_OPT = --board ${AOCLBOARD} -v -o ${AOCLBIN} ${KERNEL_DEFS} ${KERNEL_INCS}
CLCC_OPT = --board ${AOCLBOARD} -v -o ${AOCLBIN} ${KERNEL_INCS}
	#NOTE: aoc is verbose by default. TODO

ifeq (${FLOW},cpu_emu)
		CLCC_OPT += -march=emulator
    #XCLBIN = basicKernel.xclbin
else ifeq (${FLOW},hw_emu)
    #CLCC_OPT += -t hw_emu
    #XCLBIN = basicKernel.xclbin
else ifeq (${FLOW},hw)
    #XCLBIN = basicKernel.xclbin
    #CLCC_OPT += -t hw
endif

#KERNEL_DEFS +=
KERNEL_INCS = 

AOCLBOARD = p385_hpc_d5

ifeq ($(VERBOSE),1)
ECHO := 
else
ECHO := @
endif

# Where is the Altera SDK for OpenCL software?
ifeq ($(wildcard $(ALTERAOCLSDKROOT)),)
$(error Set ALTERAOCLSDKROOT to the root directory of the Altera SDK for OpenCL software installation)
endif
ifeq ($(wildcard $(ALTERAOCLSDKROOT)/host/include/CL/opencl.h),)
$(error Set ALTERAOCLSDKROOT to the root directory of the Altera SDK for OpenCL software installation.)
endif

# Libraries.
LIBS :=

# OpenCL compile and link flags.
AOCL_COMPILE_CONFIG := $(shell aocl compile-config)
AOCL_LINK_CONFIG := $(shell aocl link-config)

# Compilation flags
ifeq ($(DEBUG),1)
CXXFLAGS += -g
endif

HOST_EXE_ARGS = $(AOCLBIN)

OBJECTS= $(SRCS:.cpp=.o)

# build BOTH host and kernel
all: aoclbin host 

# build BOTH host and kernel, and run (emulation or hardware)
ifeq (${FLOW},cpu_emu)
run : host aoclbin	
	env CL_CONTEXT_EMULATOR_DEVICE_ALTERA=$(AOCLBOARD) ./${HOST_EXE} ${HOST_EXE_ARGS}	
else
run : host aoclbin	
	./${HOST_EXE} ${HOST_EXE_ARGS}
endif

# build host only
host: $(HOST_EXE)

# build kernel only
aoclbin: $(AOCLBIN)

$(HOST_EXE):
	$(CC) $(CXXFLAGS) $(CDEFINES) -fPIC \
	$(AOCL_COMPILE_CONFIG) $(SRCS) $(AOCL_LINK_CONFIG) \
	$(foreach D,$(LIB_DIRS),-L$D) \
	$(foreach L,$(LIBS),-l$L) \
	-o $(HOST_EXE)

$(AOCLBIN):
	${CLCC} ${CLCC_OPT} ${KERNEL_SRCS}

# Standard make targets
clean:
	$(ECHO)rm -f $(HOST_EXE)

.PHONY : all clean

